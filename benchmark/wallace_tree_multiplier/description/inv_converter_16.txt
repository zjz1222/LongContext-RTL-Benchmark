Module name:  
    inv_converter_16  

Function description:  
    This module converts a 16-bit two's complement input number into its corresponding negation in two's complement form. Essentially, it computes the two's complement of the input by performing a bitwise inversion and then adding one. The output is a 17-bit signed number to accommodate the potential overflow case (e.g., the negation of 16'h8000 requires 17 bits).

Input ports:  
    data_i [15:0]: A 16-bit two's complement input data to be negated.

Output ports:  
    inv_o [16:0]: A 17-bit two's complement output that represents the negation of the input data. The extra bit handles the sign extension for corner cases.

Implementation:  
    The module operates by bitwise inverting the input and adding one, providing the negated two's complement number.  
    - The least significant bit of the output (inv_o[0]) is directly assigned as the input's least significant bit (data_i[0]) because in two's complement inversion, the lowest bit is preserved during addition of one.  
    - The conversion logic for bits 1 through 13 is implemented using multiple instances of a sub-module named `inv_unit`. Each `inv_unit` takes one bit of the input data and a carry-in (or carry-like signal) to compute the current bit of the output and propagate carry information to the next stage. The outputs of these units are connected in a pipelined fashion through the `wire_cout` carry signals.  
    - Bits 14 and 15 of the output are generated via specialized modules `inv_unit_nor_out` which are optimized to reduce resource usage compared to standard units. These modules produce XOR outputs for the bit value and NOR outputs for carry control signals (`wire_cout`).  
    - A NOT gate inverts the NOR output of the penultimate stage to generate an internal control signal (`not_o`).  
    - Finally, the 17th bit (inv_o[16]) is generated by a NOR gate that combines the carry-related signal (`wire_cout[13]`) and the highest input bit (data_i[15]). This bit provides sign extension to accommodate overflow scenarios that can occur during two's complement negation of the most negative number.  
    - The module is thoroughly commented with gate-level resource analysis demonstrating a finely optimized design using combinations of AND, OR, NOT, NAND, and NOR gates.  
    Overall, this design efficiently implements a 16-bit two's complement negation producing a 17-bit output to safely represent negated values with minimal hardware resource usage.

Submodules:
    - inv_unit  
    Input ports:  
        a: a single-bit input signal  
        b: a single-bit input signal  
    Output ports:  
        xor_o: single-bit output representing the XOR of inputs a and b  
        or_o: single-bit output representing the OR of inputs a and b  
    Functionality:  
        This module implements a minimal unit for bitwise negation and addition by one, effectively realizing the XOR gate function using basic logic gates. It takes two single-bit inputs and provides their XOR and OR results as outputs. The design emphasizes minimal hardware resources while enabling reuse of intermediate signals.

    - inv_unit_nor_out  
    Input ports:  
        a: A 1-bit input signal.  
        b: A 1-bit input signal.  
    Output ports:  
        xor_o: A 1-bit output representing the XOR operation of inputs a and b, implemented via a combination of NOR and AND gates.  
        nor_o: A 1-bit output providing the NOR operation result of inputs a and b.  
    Functionality:  
        This module implements a specialized inverter unit used within the "negate and add one" module (inv_converter_16) to generate the inverted value of "-A[15]". Essentially, it realizes an XOR gate function by reusing internal NOR gates, providing a more resource-efficient alternative to a typical inverter unit. Unlike other inverter units that use an OR gate for output, this unit replaces that with an XOR configuration, reducing the gate and transistor count.

    You can call these submodules without instantiating them to implement the functionality of the module. 
